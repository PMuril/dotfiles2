#+Title: Emacs Config File

#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+STARTUP: overview

* Todolist
** DONE Find a way to integrate org-roam and Zotero without the need to export the .bib file
CLOSED: [2021-05-27 Thu 16:41]
*** DONE In case the point above is not possible find a way to encapsulate the name of the path of the library, pdfs and notes inside variables toe be shared between ivy-bibtex and org-ref
CLOSED: [2021-06-02 Wed 12:57]
** DONE Find a way to set the color of some faces at configuration time
CLOSED: [2021-06-01 Tue 02:20]
** DONE Customize the citation commands, as specified in the documentation
CLOSED: [2021-09-10 Fri 23:29]
** DONE See if there's any way to include Zotero tags in the bibliographic search
CLOSED: [2021-06-01 Tue 02:20]
** DONE Try to understand why when finding with ivy-bibtex a document that also contains annotations it is not possible to open the annotations
CLOSED: [2021-06-01 Tue 02:21]
CLOSED: [2021-09-10 Fri 23:29]
** TODO Create a fully fledged helm-config area
*** TODO Decouple the initialization of helm and helm-bibtex
** DONE Customize the flyspell error faces
CLOSED: [2021-08-24 Tue 00:39]
** DONE Replace Org-Roam Server with Org-Roam UI
CLOSED: [2022-03-05 Sat 09:13]
** DONE Activate xclip via use-package
CLOSED: [2021-09-10 Fri 23:29]
** DONE Consider the option to employ the reverse-tangling package
CLOSED: [2022-03-05 Sat 09:13]
** DONE Update the default names of the fonts via defvar
CLOSED: [2022-03-05 Sat 09:13]
** TODO Find a fully native way to specify the program to open specific
** TODO Find a way to hook  yas-minor-mode-on to the major modes where this is required
** TODO Find a better embodiement of /requires/ expressions within the definitions


* Emacs GUI customization

  #+begin_src emacs-lisp

    ;; silences the default Emacs startup message
    (setq inhibit-startup-message t)

    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (set-fringe-mode 10)

    (menu-bar-mode -1)

  #+end_src
  
* Commands
#+begin_src emacs-lisp

  (indent-for-tab-command)

  ;; Disables the double prompt when trying to quit an emacs file
  (setq confirm-kill-emacs nil)

#+end_src
** xclip-mode
#+begin_src emacs-lisp :tangle (if (eq system-type 'darwin) "./init.el" "no" )
  (use-package xclip
  :ensure t)
#+end_src
* KeyModifiers
#+begin_src emacs-lisp

  (setq mac-left-option-modifier 'meta)
  (setq mac-right-option-modifier 'none)
  (setq mac-function-modifier 'hyper) ; useful in conjuction with org-ref

#+end_src
* Backup Management
#+begin_src emacs-lisp

  (setq backup-directory-alist `(("." . "~/.config/emacs/backups")))

  (setq delete-old-versions t ;; Don't ask to delete excess backup versions.
        backup-by-copying t   ;; Copy all files, don't rename them.
        kept-new-versions 6   ;; Number of newest versions to keep.
        kept-old-versions 2   ;; Number of oldest versions to keep.
        version-control t)    ;; Use version numbers for backups. 

#+end_src
* Package Management System Setup
  #+begin_src emacs-lisp

    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
    (require 'package)
    (setq package-archives '(("org" . "https://elpa.gnu.org/packages/")
                             ("melpa" . "http://melpa.org/packages/")
                             ("melpa-stable" . "http://stable.melpa.org/packages/")))
    (package-initialize)

    (unless package-archive-contents
      (package-refresh-contents))

    ;; Bootstraps the use-package installation
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-when-compile 
      (require 'use-package))

    ;;enforces use-package manager to download a package
    ;;whenever this is require but not already installed
    (setq use-package-always-ensure t)

  #+end_src
* Appearance
** Fonts
   #+begin_src emacs-lisp

     (cond
      ((string-equal system-type "darwin")
       (progn
         (set-face-attribute 'default nil :font "Source Code Pro for Powerline" :height 180))))
   #+end_src

** Theme
   #+begin_src emacs-lisp

     (use-package doom-themes
     :init (load-theme 'doom-zenburn t))

   #+end_src

** Line Numbers
   #+begin_src emacs-lisp

     ;; Disable line numbers for some modes
     (dolist (mode '(term-mode-hook
                     shell-mode-hook
                     eshell-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

     ;;Display relative line numbers
     (global-display-line-numbers-mode)
     (setq display-line-numbers-type 'relative)

     (setq column-number-mode t)
   #+end_src
   
** Rainbow Delimiters
  #+begin_src emacs-lisp 

    (use-package rainbow-delimiters
      :ensure t
      :hook (prog-mode . rainbow-delimiters-mode))

  #+end_src

** Modeline
#+begin_src emacs-lisp

  (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode)
      :custom ((doom-modeline-height 12)))

#+end_src
* Log Mode
#+begin_src emacs-lisp

  ;; logs the command run inside emacs

  ;; To enable command tracking first run
  ;; M-x global-command-long-mode
  ;; and then
  ;; M-x clm/toggle-command-log-buffer

  (use-package command-log-mode)

#+end_src

* Ivy
  #+begin_src emacs-lisp

    (use-package ivy
      :ensure t
      :diminish
      :bind (("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

  #+end_src

** Ivy-Rich
   #+begin_src emacs-lisp

     (use-package ivy-rich
       :ensure t
       :init
       (ivy-rich-mode 1))

   #+end_src
   
* Counsel
  #+begin_src emacs-lisp

    (use-package counsel
      :ensure t
      :bind (("M-x" . counsel-M-x)
              ("C-x b" . counsel-ibuffer)
              ("C-x C-f" . counsel-find-file)
              :map minibuffer-local-map
              ("C-r" . 'counsel-minibuffer-history)))

  #+end_src 

* Olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :diminish
    :hook
    (org-mode . olivetti-mode)
    :config
    (setq olivetti-body-width 100))
#+end_src
* Perspective
#+begin_src emacs-lisp

  (use-package perspective
    :ensure t
    :bind (("C-x k" . persp-kill-buffer*))
    :init
    (persp-mode))

#+end_src
* Which Key
  #+begin_src emacs-lisp

    (use-package which-key
      :ensure t
      :init (which-key-mode)
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 0.15))

  #+end_src 

* Undo-Tree
Allows to browse the history of all elementary changes made to Emacs.
It also enables the keybinding "C-r" for redo in Evil mode.
  #+begin_src emacs-lisp

    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode 1))

  #+end_src

* Evil
  #+begin_src emacs-lisp

    ;; N.B. Due to the structure of the operations memory structure
    ;; in order to undo a previous operation it is needed first to
    ;; execute a non-editing command. E.g. To undo a previous operation
    ;; it is possible to use the keybinding C-g u.
    (defun rune/evil-hook ()
      (dolist (mode '(custom-mode
                      eshell-mode
                      git-rebase-mode
                      erc-mode
                      circe-server-mode
                      circe-chat-mode
                      circed-query-mode
                      sauron-mode
                      term-mode))
        (add-to-list 'evil-emacs-state-modes mode)))


    (use-package evil
      :ensure t
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      ;; (setq evil-want-C-u-scroll t) ;; when uncommented binds C-u to scrolling
      (setq evil-want-C-i-jump nil)
      (setq evil-want-fine-undo 'fine)

      ;; evil cursor aspect
      (setq evil-normal-state-cursor '("light blue" box))         ;;setting still not applicable in Alacritty
      (setq evil-insert-state-cursor '("medium sea green" box))   ;;setting still not applicable in Alacritty
      (setq evil-visual-state-cursor '("orange" box))             ;;setting still not applicable in Alacritty

      :hook(evil-mode . rune/evil-hook)
      :config
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

      ;; Use visual line motions even outside of visual-line-mode buffers
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal)

      ;;delegating the undo operations in Evil to undo-tree
      (evil-set-undo-system 'undo-tree))

  #+end_src

** Evil-Mode Plugins
   #+begin_src emacs-lisp

     (use-package evil-collection
       :ensure t
       :after evil
       :config
       (evil-collection-init))

     ;; vim commentary
     (evil-commentary-mode)

     ;; vim matchit
     (require 'evil-matchit)
     (global-evil-matchit-mode 1)

     ;; vim surround
     (use-package evil-surround
                  :ensure t
                  :config
                  (global-evil-surround-mode 1))

   #+end_src
   
** Custom Test Objects
The following macro allows to defined custom test objects in evil-mode. This can be useful when enviroments that depend on the programming language need to be defined.
For more informations see the corresponding [[https://github.com/emacs-evil/evil-surround][Evil Surround Documentation]].

#+begin_src emacs-lisp
  (defmacro define-and-bind-quoted-text-object (name key start-regex end-regex)
  (let ((inner-name (make-symbol (concat "evil-inner-" name)))
        (outer-name (make-symbol (concat "evil-a-" name))))
      `(progn
      (evil-define-text-object ,inner-name (count &optional beg end type)
          (evil-select-paren ,start-regex ,end-regex beg end type count nil))
      (evil-define-text-object ,outer-name (count &optional beg end type)
          (evil-select-paren ,start-regex ,end-regex beg end type count t))
      (define-key evil-inner-text-objects-map ,key #',inner-name)
      (define-key evil-outer-text-objects-map ,key #',outer-name))))
#+end_src

*** LaTeX
#+begin_src emacs-lisp
  (define-and-bind-quoted-text-object "dollar" "$" "\\$" "\\$")
  (define-and-bind-quoted-text-object "latex-environment" "e" "\\\\begin\{.*\}" "\\\\end\{.*\}")
  #+end_src
* Projectile
  #+begin_src emacs-lisp

    (use-package projectile
      :diminish projectile-mode
      :config (projectile-mode)
      :bind-keymap
      ("C-c p" . projectile-command-map)
      :init
      (when (file-directory-p "~/Dropbox/myannotations")
	(setq projectile-project-search-path '("~/Dropbox/myannotations")))
      (setq projectile-switch-project-action #'projectile-dired))

    (use-package counsel-projectile
      :config (counsel-projectile-mode))

  #+end_src 

* Magit
  #+begin_src emacs-lisp

    (use-package magit
      :custom
      (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  #+end_src 

* Embark
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))

  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
    
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src
* General Keybindings Manager
[[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][mastering emacs]] tips for setting emacs keybindings.
#+begin_src emacs-lisp

    ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-S-c") 'copy-to-clipboard)
  (global-set-key (kbd "C-S-c") 'copy-to-clipboard)
  (global-set-key (kbd "C-S-v") 'paste-from-clipboard)
  (global-set-key (kbd "C-S-v") 'paste-from-clipboard)
  ;; merges OS X and Emacs clipboards
  (setq x-select-enable-clipboard t)
  
  (global-unset-key (kbd "C-SPC"))

    (use-package general
      :after evil
      :config
      (general-create-definer efs/leader-keys
        :keymaps '(normal insert visual emacs)
        :prefix "SPC"
        :global-prefix "C-SPC") 

      (efs/leader-keys
       "t" '(:ignore t :which-key "toggles")
       "tt" '(counsel-load-theme :which-key "choose-theme")))
#+end_src

* Org Mode
** Org Mode Init Settings
   #+begin_src emacs-lisp
          (add-hook 'org-mode-hook 'org-indent-mode)

          (defun efs/org-mode-setup ()
            (org-indent-mode)
            (variable-pitch-mode 1)
            (auto-fill-mode 0)
            (visual-line-mode 1)
            (setq evil-auto-indent nil)
            (diminish org-indent-mode))

   #+end_src 
** File Extension Associations
#+begin_src emacs-lisp

        ;; Defines the custom pdf viewer to be used on linux and MacOs.
        ;; Technically is also includes the string "%s" containing the name of the file being passed to the viewer
            ;(defvar custom-pdf-viewer
            ; (cond ((string-equal system-type "darwin") "open -a \\'PDF Expert 2.app\\' %s")
            ;      ((string-equal system-type "gnu/linux") "evince %s")))


  (if (eq system-type 'darwin)
      (add-hook 'org-mode-hook
                '(lambda ()
                   (setq org-file-apps
                         '(("\\.pdf\\'" . "open -a \'PDF Expert 3.app\' %s")
                           ("\\.code-workspace\\'" . "code %s")))))
    (add-hook 'org-mode-hook
              '(lambda ()
               (setq org-file-apps
                     '(("\\.pdf\\'" . "evince %s")
                       ("\\.code-workspace\\'" . "code %s")
                       ("\\.xlsx\\'" . "libreoffice %s")
                       ("\\.docx\\'" . "libreoffice %s"))))))
  
#+end_src
** Org Mode Core Settings
   #+begin_src emacs-lisp

     (use-package org
       :ensure t
       :config
       (setq org-ellipsis "▾")
       (setq display-line-numbers 'relative)
       (setq org-agenda-start-with-log-mode t)
       (setq org-log-done 'time)
       (setq org-log-into-drawer t)
       (setq org-highlight-latex-and-related '(latex script entities))
       ;;org-mode task list
       )

     
   #+end_src
*** TODOs
#+begin_src emacs-lisp

  (require 'org-inlinetask) ;;enables inline TODOs

  (setq org-enforce-todo-dependencies t)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "DONE(d)")
          (sequence "QUESTION(q)" "ANSWER(a)")))
#+end_src
*** Tags
#+begin_src emacs-lisp

  (setq org-tag-alist '((:startgrouptag)
                        ("maths")
                        (:grouptags)
                        ("probability") ("statistics")
                        (:endgrouptag)

                        (:startgroup)
                        ("todo-type")
                        (:grouptags)
                        ("exercise") ("open problem") ("question")
                        (:endgroup)

                        (:startgroup)
                        ("priority")
                        (:grouptags)
                        ("high")("moderate")("small")("none")
                        (:endgroup) 

                        ("@numeric") ("@jamming") ("DOS") ("MFT")))
#+end_src

*** Pictures
#+begin_src emacs-lisp
  (setq org-image-actual-width nil)
#+end_src
*** LaTeX Preview
#+begin_src emacs-lisp
  (setq org-latex-create-formula-image-program 'dvipng)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src
*** LaTeX intellisense and code Completion
#+begin_src emacs-lisp
  (require 'latex)
  (setq latex-math-mode t)
#+end_src
*** Org-Mode export
** Org-Mode Appearence
*** Custom Faces
#+begin_src emacs-lisp
  (set-face-attribute 'org-ellipsis nil :foreground "wheat2" )
  (set-face-attribute 'org-headline-done nil :foreground "gray73" )
  (set-face-attribute 'org-document-info-keyword nil :foreground "gray73")

 ;setting the default faces for emacs and linux systems

  (defvar custom-org-face
    (cond ((string-equal system-type "darwin") "Source Code Pro for Powerline")
    ((string-equal system-type "gnu/linux") "DejaVuSansMono")))
#+end_src
*** Org Bullets
   #+begin_src emacs-lisp

          (use-package org-bullets
            :after org
            :hook (org-mode . org-bullets-mode)
            :custom
            (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))


            ;; Set faces for heading levels
     (with-eval-after-load 'org-faces
            (dolist (face '((org-level-1 . 1.2)
                            (org-level-2 . 1.1)
                            (org-level-3 . 1.05)
                            (org-level-4 . 1.0)
                            (org-level-5 . 1.0)
                            (org-level-6 . 1.0)
                            (org-level-7 . 1.1)
                            (org-level-8 . 1.1)))
              (set-face-attribute (car face) nil :font custom-org-face :weight 'regular :height (cdr face))))

   #+end_src 

*** Fill-Column Mode
   #+begin_src emacs-lisp

     (defun efs/org-mode-visual-fill ()
       (setq visual-fill-column-width 100
	     visual-fill-column-center-text t)
       (visual-fill-column-mode 1))

     (use-package visual-fill-column
       :hook (org-mode . efs/org-mode-visual-fill))

   #+end_src

** Org Agenda
   #+begin_src emacs-lisp

     (setq org-agenda-custom-commands
      '(("d" "Dashboard"
	((agenda "" ((org-deadline-warning-days 7)))
	 (todo "NEXT"
	   ((org-agenda-overriding-header "Next Tasks")))
	 (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

       ("n" "Next Tasks"
	((todo "NEXT"
	   ((org-agenda-overriding-header "Next Tasks")))))

       ("W" "Work Tasks" tags-todo "+work-email")

       ;; Low-effort next actions
       ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	((org-agenda-overriding-header "Low Effort Tasks")
	 (org-agenda-max-todos 20)
	 (org-agenda-files org-agenda-files)))

       ("w" "Workflow Status"
	((todo "WAIT"
	       ((org-agenda-overriding-header "Waiting on External")
		(org-agenda-files org-agenda-files)))
	 (todo "REVIEW"
	       ((org-agenda-overriding-header "In Review")
		(org-agenda-files org-agenda-files)))
	 (todo "PLAN"
	       ((org-agenda-overriding-header "In Planning")
		(org-agenda-todo-list-sublevels nil)
		(org-agenda-files org-agenda-files)))
	 (todo "BACKLOG"
	       ((org-agenda-overriding-header "Project Backlog")
		(org-agenda-todo-list-sublevels nil)
		(org-agenda-files org-agenda-files)))
	 (todo "READY"
	       ((org-agenda-overriding-header "Ready for Work")
		(org-agenda-files org-agenda-files)))
	 (todo "ACTIVE"
	       ((org-agenda-overriding-header "Active Projects")
		(org-agenda-files org-agenda-files)))
	 (todo "COMPLETED"
	       ((org-agenda-overriding-header "Completed Projects")
		(org-agenda-files org-agenda-files)))
	 (todo "CANC"
	       ((org-agenda-overriding-header "Cancelled Projects")
		(org-agenda-files org-agenda-files)))))))

   #+end_src 

** Org-Babel
*** Programming Languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (C . t)
     (awk . t)
     (latex . t)
     (gnuplot . t)
     (lua . t))) ;; C, C++ and D are all activated loading the C language

  (setq org-confirm-babel-evaluate nil)
#+end_src

*** Org Structure Template
   #+begin_src emacs-lisp

     (require 'org-tempo)

     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
     (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
     (add-to-list 'org-structure-template-alist '("la" . "src latex"))
     (add-to-list 'org-structure-template-alist '("gp" . "src gnuplot"))

   #+end_src
   
*** Auto-tangle Configuration Files
   #+begin_src emacs-lisp

     ;; Automatically tangles the emacs_connfig.ord when it is saved
     (defun efs/org-babel_tangle-config ()
       (when (string-equal (buffer-file-name)
			   (expand-file-name "~/.config/emacs/emacs_config.org"))
	 ;;Dynamic scoping to the rescue
	 (let ((org-confirm-babel-evaluate nil))
	   (org-babel-tangle)))

       (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config))))

   #+end_src

** Org Keybindings
#+begin_src emacs-lisp

  ;;org-mode keybindings
  ;;enforces the use of org-modes files when conflicting
  (setq  org-want-todo-bindings t)
  (global-set-key (kbd "C-c l")   'org-store-link)
  (global-set-key (kbd "C-c C-l") 'org-insert-link)

  (general-define-key
   :states '(normal visual)
   :keymaps 'org-mode-map
   :prefix "C-c"
   "e"  '(:ignore t :which-key "export")
   "el" 'org-latex-export-to-pdf
   "ep" 'org-publish-current-project
   "s" 'org-store-link
   "o" 'counsel-imenu
   "b" 'helm-bibtex
   )

#+end_src

** CDLaTeX Integration
#+begin_src emacs-lisp
        (use-package cdlatex
          :ensure t
          :bind ("C-c C-{" . org-cdlatex-environment-indent))

        ;; enables org-cdlatex (for latex math macros insertion) at org-mode startup
        (add-hook 'org-mode-hook #'turn-on-org-cdlatex)

        ;; adding custom environment for unnumbered equation
        (setq cdlatex-env-alist
              '(("equation*" "\\begin{equation*}\n?\n\\end{equation*}\n" nil)
                ("theorem" "\\begin{theorem}\nAUTOLABEL\n?\n\\end{theorem}\n" nil)
                ("proof" "\\begin{proof}\nAUTOLABEL\n?\n\\end{proof}\n" nil)
                ("lemma" "\\begin{lemma}\nAUTOLABEL\n?\n\\end{lemma}\n" nil)
                ("corollary" "\\begin{corollary}\nAUTOLABEL\n?\n\\end{corollary}\n" nil)))

      ;;adding custom accent to produce the Mathbb style
    (setq cdlatex-math-modify-alist
          '((66 "\\mathbb" nil t nil nil))) ;; 'B -> \mathbb

  (setq cdlatex-command-alist
  '(("bin" "Insert \\binom{}{}" "\\binom{?}{}" cdlatex-position-cursor nil nil t)))

#+end_src

* Org-Roam
** Custom Functions
#+begin_src emacs-lisp

  (defun my/org-roam-link-word-at-point ()
    (interactive)
    (when (word-at-point t)
      (re-search-backward "\\b")
      (mark-word)
      (call-interactively #'org-roam-insert-immediate)))

  (defun my/org-roam-open-or-link-at-point ()
    (interactive)
    (let ((context (org-element-context)))
      (if (equal (car context) 'link)
          (org-open-at-point)
        (my/org-roam-link-word-at-point))))

    (defvar custom-org-roam-directory
    (cond ((string-equal system-type "darwin") "~/Dropbox/myannotations/org-roam")
          ((string-equal system-type "gnu/linux") "~/workspace/myannotations")))

    (defvar custom-org-roam-index
    (cond ((string-equal system-type "darwin") "~/Dropbox/myannotations/org-roam/index.org")
          ((string-equal system-type "gnu/linux") "~/workspace/myannotations/index.org")))

#+end_src

Following local org-roam-mode is defined so that org-roam keybindings is valid only in org-roam directory
#+begin_src emacs-lisp
  (define-minor-mode my/local-org-roam-mode
    "Local version of `org-roam-mode'.
            Does nothing but can be used for local keybindings."
    :init-value nil
    :global nil
    :lighter " OR local"
    :keymap (let ((map (make-sparse-keymap)))
              map)
    :group 'org-roam
    :require 'org-roam
    (when my/local-org-roam-mode
      (message "Local keybindings for Org Roam enabled")))
#+end_src
** Org-Roam Core Settings
  #+begin_src emacs-lisp

    ;;finding ORG-ROAM dependency: sqlite3
    (executable-find "sqlite3")
    (add-to-list 'exec-path "path/to/sqlite")

    (use-package org-roam
      :ensure t
      :custom
      (org-roam-directory custom-org-roam-directory)
      (org-roam-index custom-org-roam-index)
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-ui-open)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n c" . org-roam-capture)
             ("C-c n t" . org-roam-tag-add) ;; Use TAB to get suggestions
             ;; Dailies
             ("C-c n j" . org-roam-dailies-capture-today))
      :config
      (org-roam-setup)
      ;; If using org-roam-protocol
      ;; (require 'org-roam-protocol)
      )

    ;;specifies that org-roam v2 is in use
    (setq org-roam-v2-ack t)

    ;; specify the app to open the org-roam-graph
    (setq org-roam-graph-executable "/usr/local/Cellar/graphviz/2.47.1/bin/dot")
    (setq org-roam-graph-viewer "/Applications/Firefox.app/Contents/MacOS/firefox")

    #+end_src  
*** Deft
#+begin_src emacs-lisp
  (use-package deft
    :bind ("<f8>" . deft)
    :commands(deft)
    :config(setq deft-directory
                 deft-extensions '("org")))
#+end_src
*** Org-Roam Keybindings
#+begin_src emacs-lisp
  (general-define-key
   :states '(normal visual)
   :keymaps 'my/local-org-roam-mode-map
   :prefix "SPC"
   "r" '(:ignore t :which-key "roam")
   "rr" 'rename-file
   "rd" 'delete-file
   "rh" 'org-roam-jump-to-index
   "rb" 'org-roam
   )

    ;; rebind enter key in normal mode to my/org-roam-link-word-at-point
  (define-key my/local-org-roam-mode-map [remap evil-ret] 'my/org-roam-open-or-link-at-point)
#+end_src
** Org-Roam Bibtex
Below is provided a configuration of Org-Roam Bibtext using
either *Helm-Bibtex* or *Ivy-Bibtex* as beckend. The two configurations
are (presumably) mutually exclusive and therefore cannot be
simultaneously activated
# *** Helm-Bibtex Beckend
# #+begin_src emacs-lisp :tangle (if (eq system-type 'darwin) "./init.el" "no" )
#   (use-package helm-bibtex
#     :ensure t
#     :bind (("C-c h b" . helm-bibtex)
#            ("C-c h n" . helm-bibtex-with-notes)))

#     (require 'helm-config)
#     (helm-mode 1)
#     (autoload 'helm-bibtex "helm-bibtex" "" t)
# #+end_src
# *** Ivy-Bibtex Beckend
# #+begin_src emacs-lisp :tangle (if (eq system-type 'darwin) "./init.el" "no" )
#   (autoload 'ivy-bibtex "ivy-bibtex" "" t)
#   (setq ivy-re-builders-alist
#         '((ivy-bibtex . ivy--regex-ignore-order)
#           (t . ivy--regex-plus)))
# #+end_src
# *** Bibliographic Database Management
# #+begin_src emacs-lisp :tangle (if (eq system-type 'darwin) "./init.el" "no" )

#   (setq bibtex-completion-bibliography '("~/Zotero/zotero_full_lib.bib"))
#   (setq bibtex-completion-pdf-field "file")
#   (setq bibtex-completion-notes-path "~/Dropbox/myannotations/org-roam/Zotero")

#   ;; For publications that are composed of more than 1 PDF file
#   ;;e.g. a main pubblication + supplemental informations
#   ;; this triggers the engine to browse for additional materials
#   (setq bibtex-completion-find-additional-pdfs t)

#   (setq bibtex-completion-pdf-symbol "⌘")
#   (setq bibtex-completion-notes-symbol "✎")

#   ;; specify the application to open the publication pdf when this is present
#   (setq bibtex-completion-pdf-open-function
#         (lambda (fpath)
#           (call-process "open" nil 0 nil "-a" "/Applications/PDF Expert 2.app" fpath)))

#   ;; specify the browser for opening URLs or DOIs
#   (setq bibitex-completion-browser-function
#         (lambda (ril -) (start-process "firefox" "*firefox*" "firefox" url)))

#+end_src
*** Org-Ref
#+begin_src emacs-lisp :tangle (if (eq system-type 'darwin) "./init.el" "no" )
      (use-package org-ref
        :bind (("C-c r h" . 'org-ref-insert-link-hydra/body)
               ("C-c r l" . 'org-ref-insert-label-link)
               ("C-c r g" . 'org-ref-add-glossary-entry)
               ("C-c r a" . 'org-ref-add-acronym-entry)))

      (setq reftex-default-bibliography '("~/Zotero/zotero_full_lib.bib"))
      (setq org-ref-default-bibliography '("~/Zotero/zotero_full_lib.bib"))
      (setq org-ref-notes-function 'org-ref-notes-function-many-files)

      (setq org-ref-notes-directory "~/Dropbox/myannotations/org-roam/Zotero")

      (defun efs/org-ref-open-pdf-at-point ()
        "Open the pdf for bibtex key under point if it exists"
        (interactive)
        (let* ((results (org-ref-get-bibtex-key-and-file))
               (key (car results))
               (pdf-file (car (bibtex-completion-find-pdf key))))
          (if (file-exists-p pdf-file)
              (org-open-file pdf-file)
            (message "No PDF found for %s" key))))

      (setq org-ref-open-pdf-function 'efs/org-ref-open-pdf-at-point)

      ;;specify that org-latex-pdf-process takes also care of processing the bibliography
      (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))

      ;; since version 3 org-ref no longer provides automatic keybindings the following provides two alternatives for defining org-ref keybindings
      ;;gets the behavior of version 2
      ;; (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)

  ;;specifies that the Bibliography has to be produced by using the biblatex dialect
    (setq bibtex-dialect 'biblatex)
      ;;delegates to hydra
    ;; (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link-hydra/body)
#+end_src

*** Org-Roam Bibtex
#+begin_src emacs-lisp :tangle (if (eq system-type 'darwin) "./init.el" "no" )
  (use-package org-roam-bibtex
    :after org-roam
    :config
    (require 'org-ref)
    :bind (:map org-mode-map
                (("C-c n a" . orb-note-actions))))

  (setq orb-preformat-keywords
        '(("citekey" . "=key=")
          "title"
          "url"
          "author-or-editor-abbrev"
          "abstract"
          "keywords"))

  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n *Todolist\n *References\n")
           :unnarrowed t)
          ("r" "ref" plain
           (file "~/.config/emacs/orb-templates/reference.org")
           :if-new
           (file+head "Zotero/${citekey}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("p" "design-pattern" plain
           (file "~/.config/emacs/orb-templates/design-pattern-note-template.org")
           :if-new
           (file+head "design-patterns/${title}.org" "#+title: ${title}\n")
           :unnarrowed t)))

#+end_src

*** Citar
#+begin_src emacs-lisp
  (use-package citar
    :bind (("C-c b" . citar-insert-citation)
           :map minibuffer-local-map
           ("M-b" . citar-insert-preset))
    :custom
    (citar-bibliography '("~/Zotero/zotero_full_lib.bib")))

  (setq citar-open-note-function 'orb-citar-edit-note)
  (setq citar-notes-paths '("~/Dropbox/myannotations/org-roam"))

#+end_src
** Org-Roam Ui
#+begin_src emacs-lisp :tangle (if (eq system-type 'darwin) "./init.el" "no")
    ;; (add-to-list 'load-path "~/.emacs.d/private/org-roam-ui")
      ;; (load-library "org-roam-ui")

  (use-package org-roam-ui
    :ensure t
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src
* AucTex
** Auto-Fill-Mode
#+begin_src emacs-lisp
  (defcustom LaTeX-inhibited-auto-fill-environments
    '("equation" "equation*" "array" "tabular" "tikzpicture") "For which LaTeX environments not to run auto-fill.")

  (defun LaTeX-limited-auto-fill ()
    (let ((environment (LaTeX-current-environment)))
      (when (not (member environment LaTeX-inhibited-auto-fill-environments))
        (do-auto-fill))))

#+end_src
** Font Locking
#+begin_src emacs-lisp
  (setq font-latex-match-reference-keywords
        '(
          ;; cleveref
          ("cref" "{")
          ;; user-defined
          ("acrfull" "{")))
#+end_src
** Math Mode Customization
#+begin_src emacs-lisp
  (setq LaTeX-math-abbrev-prefix "°")
#+end_src
** AucTex Core Settings 
#+begin_src emacs-lisp

  (setq TeX-auto-save t)
  (setq TeX-parse-self t)

  ;; LaTeX-mode hooks
  ;;enables flyspell (frontend grammar checker) mode whenever a .tex buffer is opened
  (add-hook 'LaTeX-mode-hook #'turn-on-flyspell)

  ;;enables math mode mode whenever a .tex buffer is opened
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

  ;;enables auto-fill-mode mode mode whenever a .tex buffer is opened
  (add-hook 'LaTeX-mode-hook
              (lambda () (setq auto-fill-function #'LaTeX-limited-auto-fill)) t)

  ;;enables CDLaTex whenever a .tex buffer is opened
  (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)

#+end_src
** RefTeX
#+begin_src emacs-lisp :tangle (if (eq system-type 'darwin) "./init.el" "no" )
    (require 'bibtex-completion)
    (require 'tex)

    (defun open-key-at-point ()
      (interactive)
      (let (start end key)
        (save-excursion
          (setq start (progn (re-search-backward "{\\|,") (match-end 0))
              end (progn (re-search-forward "}\\|,") (match-beginning 0))
              key (buffer-substring-no-properties start end)))

          (bibtex-completion-show-entry (list key))
          (bibtex-beginning-of-entry)))

  (setq reftex-default-bibliography '("~/Zotero/zotero_full_lib.bib"))
      ;; (define-key tex-mode-map (kbd "C-c h o") #'open-key-at-point)
#+end_src
#+begin_src emacs-lisp
  ;; enables reftex whenever a latex buffer is opened
  (require 'reftex)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

  ;; Use reftex commands as part of the AUCTeX environment
  (setq reftex-plug-into-AUCTeX t)
#+end_src
** Ispell
#+begin_src emacs-lisp

    (setq LaTeX-fill-break-before-code-comments nil)
    (setq-default TeXMaster nil)

    ;;sets aspell as the beckend engine for spellchecking in TeX buffers
    (setq-default ispell-program-name "aspell")
    (setq ispell-dictionary "english")

    ;; specifies the path where to store the personal dictionary
    (setq ispell-personal-dictionary "~/.config/emacs/dictionaries/aspell_personal")

    (setq ispell-list-command "--list --mode=tex")

    (global-set-key (kbd "C-c i b") 'ispell-buffer)
    (global-set-key (kbd "C-c i f") 'flyspell-buffer)
    (global-set-key (kbd "C-c C-q C-b") 'LaTeX-fill-buffer)

    (setq ispell-tex-skip-alists
          (list
           (append
            (car ispell-tex-skip-alists)
            '(("[^\\]\\$" . "[^\\]\\$")
              ("\\\\acrfull" ispell-tex-arg-end 2)
              ("\\\\eqref" ispell-tex-arg-end 2)
              ("\\\\begin{equation}" . "\\\\end{equation}")
              ("\\\\begin{equation\\*}" . "\\\\end{equation\\*}")
              ))
           (cadr ispell-tex-skip-alists)))
#+end_src
* Yasnippets
#+begin_src emacs-lisp :tangle (if (eq system-type 'darwin) "./init.el" "no" )
      (add-to-list 'load-path
                   "~/.config/emacs/plugins/yasnippet")

      (use-package yasnippet
        :bind (("C-c y s" . yas-insert-snippet)
               ("C-c y x" . yas-activate-extra-mode)
               ("C-c y o" . yas-minor-mode-on)))

      (yas-reload-all)
      (add-hook 'prog-mode-hook #'yas-minor-mode)

    ;; fundamental-mode loads a set of snippets that are useful in a multi-environment environment and that gets loaded whenever a minor mode is activated
    (add-hook 'yas-minor-mode-hook (lambda ()
                                     (yas-activate-extra-mode 'fundamental-mode)))
  (add-hook 'latex-mode-hook (lambda ()
                             (yas-activate-extra-mode 'latex-mode)))
  (add-hook 'org-mode-hook (lambda ()
                             (yas-activate-extra-mode 'latex-mode)))
#+end_src

* Openwith
#+begin_src emacs-lisp
  (use-package openwith
    :config
    (setq openwith-associations '(("\\.pdf\\'" "open -a \'PDF Expert 3.app\'" (file)))))
    (openwith-mode t)
#+end_src


