#+Title: Emacs Config File

#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+STARTUP: overview

* Emacs GUI customization

  #+begin_src emacs-lisp

    ;; silences the default Emacs startup message
    (setq inhibit-startup-message t)

    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (set-fringe-mode 10)

    (menu-bar-mode -1)

  #+end_src
  
* Commands
#+begin_src emacs-lisp

  (indent-for-tab-command)

  ;; Disables the double prompt when trying to quit an emacs file
  (setq confirm-kill-emacs nil)

  ;; copy to system clipboard
  ;;works both on MacOs and Linux
  (xclip-mode 1)

#+end_src
* KeyModifiers
#+begin_src emacs-lisp

  ;; (cond
  ;;   ((string-equal system-type "darwin")
  (setq mac-left-option-modifier 'meta)
  ;; (setq mac-right-command-modifier 'meta)
  ;; (setq mac-caps-modifier 'control)
  ;; enables the input of special characters on MacOS
  (setq mac-right-option-modifier 'none)

#+end_src
* Backup Management
#+begin_src emacs-lisp

  (setq backup-directory-alist `(("." . "~/.config/emacs/backups")))

  (setq delete-old-versions t ;; Don't ask to delete excess backup versions.
        backup-by-copying t   ;; Copy all files, don't rename them.
        kept-new-versions 6   ;; Number of newest versions to keep.
        kept-old-versions 2   ;; Number of oldest versions to keep.
        version-control t)    ;; Use version numbers for backups. 

#+end_src
* Package System Setup
  #+begin_src emacs-lisp


    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
    (require 'package)
    (setq package-archives '(("org" . "https://elpa.gnu.org/packages/")
                             ("melpa" . "http://melpa.org/packages/")
                             ("melpa-stable" . "http://stable.melpa.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    ;; Initialize use-package on non-Linux platform
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    ;;enforces package manager to download a package
    ;;whenever this is require but not already installed
    (setq use-package-always-ensure t)

  #+end_src
* Appearance
** Fonts
   #+begin_src emacs-lisp

     ;;Default font settings
     ;; (set-frame-font "Source Code Pro for Powerline 12" nil t)
     (cond
      ((string-equal system-type "darwin")
       (progn
         (set-face-attribute 'default nil :font "Source Code Pro for Powerline" :height 180))))
   #+end_src

** Theme
   #+begin_src emacs-lisp

     ;; if system is MacOs enables doom-dracula color theme
     ;; otherwise load the default theme
     (use-package doom-themes
     :init (load-theme 'doom-zenburn t))

   #+end_src

** Line Numbers
   #+begin_src emacs-lisp

      ;; Disable line numbers for some modes
     (dolist (mode '(term-mode-hook
                     shell-mode-hook
                     eshell-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

     ;;Display relative line numbers
     (global-display-line-numbers-mode)
     (setq display-line-numbers-type 'relative)

   #+end_src
   
** Rainbow Delimiters
  #+begin_src emacs-lisp 

    (use-package rainbow-delimiters
	:hook (prog-mode . rainbow-delimiters-mode))

  #+end_src

** Modeline
#+begin_src emacs-lisp

  (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1)
      :custom ((doom-modeline-height 12)))

#+end_src
* Log Mode
#+begin_src emacs-lisp
    ;; logs the command run inside emacs
    (use-package command-log-mode)
#+end_src

* Ivy
  #+begin_src emacs-lisp

    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

  #+end_src

** Ivy-Rich
   #+begin_src emacs-lisp

     (use-package ivy-rich
       :init
       (ivy-rich-mode 1))

   #+end_src
   
* Counsel
  #+begin_src emacs-lisp

    (use-package counsel
      :bind (("M-x" . counsel-M-x)
	      ("C-x b" . counsel-ibuffer)
	      ("C-x C-f" . counsel-find-file)
	      :map minibuffer-local-map
	      ("C-r" . 'counsel-minibuffer-history)))

  #+end_src 

* Olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :diminish
    :hook
    (text-mode . olivetti-mode)
    :config
    (setq olivetti-body-width 100))
#+end_src
* Which Key
  #+begin_src emacs-lisp

    (use-package which-key
      :init (which-key-mode)
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 0.15))

  #+end_src 

* Undo-Tree
Allows to browse the history of all elementary changes made to Emacs.
It also enables the keybinding "C-r" for redo in Evil mode.
  #+begin_src emacs-lisp

    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode 1))

  #+end_src

* Evil
  #+begin_src emacs-lisp

    ;; N.B. Due to the structure of the operations memory structure
    ;; in order to undo a previous operation it is needed first to
    ;; execute a non-editing command. E.g. To undo a previous operation
    ;; it is possible to use the keybinding C-g u.
    (defun rune/evil-hook ()
      (dolist (mode '(custom-mode
                      eshell-mode
                      git-rebase-mode
                      erc-mode
                      circe-server-mode
                      circe-chat-mode
                      circed-query-mode
                      sauron-mode
                      term-mode))
        (add-to-list 'evil-emacs-state-modes mode)))


    (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      (setq evil-want-fine-undo 'fine)

      ;; evil cursor aspect
      (setq evil-normal-state-cursor '("light blue" box))         ;;setting still not applicable in Alacritty
      (setq evil-insert-state-cursor '("medium sea green" box))   ;;setting still not applicable in Alacritty
      (setq evil-visual-state-cursor '("orange" box))             ;;setting still not applicable in Alacritty

      :hook(evil-mode . rune/evil-hook)
      :config
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

      ;; Use visual line motions even outside of visual-line-mode buffers
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal)

      ;;delegating the undo operations in Evil to undo-tree
      (evil-set-undo-system 'undo-tree))

  #+end_src

** Evil-Mode Plugins
   #+begin_src emacs-lisp

     (use-package evil-collection
       :after evil
       :config
       (evil-collection-init))

     ;; vim commentary
     (evil-commentary-mode)

     ;; vim matchit
     (require 'evil-matchit)
     (global-evil-matchit-mode 1)

     ;; vim surround
     (use-package evil-surround
		  :ensure t
		  :config
		  (global-evil-surround-mode 1))

   #+end_src

* Projectile
  #+begin_src emacs-lisp

    (use-package projectile
      :diminish projectile-mode
      :config (projectile-mode)
      :bind-keymap
      ("C-c p" . projectile-command-map)
      :init
      (when (file-directory-p "~/Dropbox/myannotations")
	(setq projectile-project-search-path '("~/Dropbox/myannotations")))
      (setq projectile-switch-project-action #'projectile-dired))

    (use-package counsel-projectile
      :config (counsel-projectile-mode))

  #+end_src 

* Magit
  #+begin_src emacs-lisp

    (use-package magit
      :custom
      (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  #+end_src 

* General Keybindings Manager
[[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][mastering emacs]] tips for setting emacs keybindings.
#+begin_src emacs-lisp

    ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-unset-key (kbd "C-SPC"))

    (use-package general
      :after evil
      :config
      (general-create-definer efs/leader-keys
        :keymaps '(normal insert visual emacs)
        :prefix "SPC"
        :global-prefix "C-SPC") 

      (efs/leader-keys
       "t" '(:ignore t :which-key "toggles")
       "tt" '(counsel-load-theme :which-key "choose-theme")))
  ;; "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.config/emacs/emacs_config.org")))))

    ;; (general-define-key
    ;;  "C-M-j" 'counsel-switch-buffer)

#+end_src

* Org Mode
** Org Mode Init Settings
   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook 'org-indent-mode)

          (defun efs/org-mode-setup ()
            (org-indent-mode)
            (variable-pitch-mode 1)
            (auto-fill-mode 0)
            (visual-line-mode 1)
          (setq evil-auto-indent nil)
          (diminish org-indent-mode))

   #+end_src 
** General Settings
   #+begin_src emacs-lisp

     (use-package org
       :config
       (setq org-ellipsis "▾")
       (setq display-line-numbers 'relative)
       ;; (set-face-attribute 'org-ellipsis :color "wheat2")
       ;; current activation: M-x customize-face RET org-ellipsis RET
       ;;(efs/org-font-setup)
       ;; Here it would probably be necessary to setup an environment specific folder
       (setq org-agenda-start-with-log-mode t)
       (setq org-log-done 'time)
       (setq org-log-into-drawer t)
       ;;org-mode task list
       (setq org-tag-alist '(
                             ;; ("@parisi" . ?gp) ("@geotsek" . ?gt)
                             ("@amerigo" . ?a) ("@macchioni" . ?m) ("@grazzini" . ?g)
                             ("@numeric" . ?n) ("@jamming" . ?j) ("DOS" . ?d) ("MFT" . ?m)
                             ("@exercise" . ?e) ("@open problem" ?p) ("question" ?q)))
     )

   #+end_src

** Org-Mode Custom faces
#+begin_src emacs-lisp
  (set-face-attribute 'org-ellipsis nil :foreground "wheat2" )
  (set-face-attribute 'org-headline-done nil :foreground "gray73" )
  (set-face-attribute 'org-document-info-keyword nil :foreground "gray73")
#+end_src
** Org Agenda
   #+begin_src emacs-lisp

     (setq org-agenda-custom-commands
      '(("d" "Dashboard"
	((agenda "" ((org-deadline-warning-days 7)))
	 (todo "NEXT"
	   ((org-agenda-overriding-header "Next Tasks")))
	 (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

       ("n" "Next Tasks"
	((todo "NEXT"
	   ((org-agenda-overriding-header "Next Tasks")))))

       ("W" "Work Tasks" tags-todo "+work-email")

       ;; Low-effort next actions
       ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	((org-agenda-overriding-header "Low Effort Tasks")
	 (org-agenda-max-todos 20)
	 (org-agenda-files org-agenda-files)))

       ("w" "Workflow Status"
	((todo "WAIT"
	       ((org-agenda-overriding-header "Waiting on External")
		(org-agenda-files org-agenda-files)))
	 (todo "REVIEW"
	       ((org-agenda-overriding-header "In Review")
		(org-agenda-files org-agenda-files)))
	 (todo "PLAN"
	       ((org-agenda-overriding-header "In Planning")
		(org-agenda-todo-list-sublevels nil)
		(org-agenda-files org-agenda-files)))
	 (todo "BACKLOG"
	       ((org-agenda-overriding-header "Project Backlog")
		(org-agenda-todo-list-sublevels nil)
		(org-agenda-files org-agenda-files)))
	 (todo "READY"
	       ((org-agenda-overriding-header "Ready for Work")
		(org-agenda-files org-agenda-files)))
	 (todo "ACTIVE"
	       ((org-agenda-overriding-header "Active Projects")
		(org-agenda-files org-agenda-files)))
	 (todo "COMPLETED"
	       ((org-agenda-overriding-header "Completed Projects")
		(org-agenda-files org-agenda-files)))
	 (todo "CANC"
	       ((org-agenda-overriding-header "Cancelled Projects")
		(org-agenda-files org-agenda-files)))))))

   #+end_src 

** Fill-Column Mode
   #+begin_src emacs-lisp

     (defun efs/org-mode-visual-fill ()
       (setq visual-fill-column-width 100
	     visual-fill-column-center-text t)
       (visual-fill-column-mode 1))

     (use-package visual-fill-column
       :hook (org-mode . efs/org-mode-visual-fill))

   #+end_src

** Org Bullets  
   #+begin_src emacs-lisp

     (use-package org-bullets
       :after org
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))


       ;; Set faces for heading levels
(with-eval-after-load 'org-faces
       (dolist (face '((org-level-1 . 1.2)
		       (org-level-2 . 1.1)
		       (org-level-3 . 1.05)
		       (org-level-4 . 1.0)
		       (org-level-5 . 1.0)
		       (org-level-6 . 1.0)
		       (org-level-7 . 1.1)
		       (org-level-8 . 1.1)))
	 (set-face-attribute (car face) nil :font "Source Code Pro for Powerline" :weight 'regular :height (cdr face))))

   #+end_src 

** Org Structure Template
   #+begin_src emacs-lisp

     (require 'org-tempo)

     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
     (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
     (add-to-list 'org-structure-template-alist '("latex" . "src latex"))

   #+end_src
   
** Auto-tangle Configuration Files
   #+begin_src emacs-lisp

     ;; Automatically tangles the emacs_connfig.ord when it is saved
     (defun efs/org-babel_tangle-config ()
       (when (string-equal (buffer-file-name)
			   (expand-file-name "~/.config/emacs/emacs_config.org"))
	 ;;Dynamic scoping to the rescue
	 (let ((org-confirm-babel-evaluate nil))
	   (org-babel-tangle)))

       (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config))))

   #+end_src

** Org Keybindings
#+begin_src emacs-lisp

  ;;org-mode keybindings
  ;;enforces the use of org-modes files when conflicting
  (setq  org-want-todo-bindings t)
  (global-set-key (kbd "C-c l")   'org-store-link)
  (global-set-key (kbd "C-c C-l") 'org-insert-link)

  (general-define-key
   :states '(normal visual)
   :keymaps 'org-mode-map
   :prefix "SPC"
   "e"  '(:ignore t :which-key "export")
   "el" 'org-latex-export-to-pdf
   "ep" 'org-publish-current-project
   "s" 'org-store-link
   "o" 'counsel-imenu
   "b" 'helm-bibtex
   )

#+end_src
   
* Org-Roam
** Custom Functions
#+begin_src emacs-lisp

      (defun my/org-roam-link-word-at-point ()
        (interactive)
        (when (word-at-point t)
          (re-search-backward "\\b")
          (mark-word)
          (call-interactively #'org-roam-insert-immediate)))

      (defun my/org-roam-open-or-link-at-point ()
        (interactive)
        (let ((context (org-element-context)))
          (if (equal (car context) 'link)
              (org-open-at-point)
            (my/org-roam-link-word-at-point))))

  (defvar custom-org-roam-directory
  (cond ((string-equal system-type "darwin") "~/Dropbox/myannotations/org-roam")
        ((string-equal system-type "linux") "~/workspace/myannotations")))

  (defvar custom-org-roam-index
  (cond ((string-equal system-type "darwin") "~/Dropbox/myannotations/org-roam/index.org")
        ((string-equal system-type "linux") "~/workspace/myannotations/index.org")))

#+end_src

Following local org-roam-mode is defined so that org-roam keybindings is valid only in org-roam directory
#+begin_src emacs-lisp
  (define-minor-mode my/local-org-roam-mode
    "Local version of `org-roam-mode'.
            Does nothing but can be used for local keybindings."
    :init-value nil
    :global nil
    :lighter " OR local"
    :keymap (let ((map (make-sparse-keymap)))
              map)
    :group 'org-roam
    :require 'org-roam
    (when my/local-org-roam-mode
      (message "Local keybindings for Org Roam enabled")))
#+end_src
** Org-Roam Init Settings
  #+begin_src emacs-lisp

    ;;finding ORG-ROAM dependency: sqlite3
    (executable-find "sqlite3")
    (add-to-list 'exec-path "path/to/sqlite")

    (use-package org-roam
      :ensure t
      :custom
      (org-roam-directory custom-org-roam-directory)
      (org-roam-index custom-org-roam-index)
      ;; ((my/set-org-roam-index-file))
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-graph)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n c" . org-roam-capture)
             ;; Dailies
             ("C-c n j" . org-roam-dailies-capture-today))
      :config
      (org-roam-setup)
      ;; If using org-roam-protocol
      ;; (require 'org-roam-protocol)
      )

    ;;specifies that org-roam v2 is in use
    (setq org-roam-v2-ack t)

    (add-hook 'after-init-hook 'org-roam-mode)

    ;; specify the app to open the org-roam-graph
    (setq org-roam-graph-executable "/usr/local/Cellar/graphviz/2.47.1/bin/dot")
    (setq org-roam-graph-viewer "/Applications/Firefox.app/Contents/MacOS/firefox")

    #+end_src  
** Deft
#+begin_src emacs-lisp
  (use-package deft
    :bind ("<f8>" . deft)
    :commands(deft)
    :config(setq deft-directory
                 deft-extensions '("org")))
#+end_src
** Org-Roam Keybindings
#+begin_src emacs-lisp
  (general-define-key
   :states '(normal visual)
   :keymaps 'my/local-org-roam-mode-map
   :prefix "SPC"
   "r" '(:ignore t :which-key "roam")
   "rr" 'rename-file
   "rd" 'delete-file
   "rh" 'org-roam-jump-to-index
   "rb" 'org-roam
   )

    ;; rebind enter key in normal mode to my/org-roam-link-word-at-point
  (define-key my/local-org-roam-mode-map [remap evil-ret] 'my/org-roam-open-or-link-at-point)
#+end_src
** Org-Roam Bibtex
Below is provided a configuration of Org-Roam Bibtext using
either *Helm-Bibtex* or *Ivy-Bibtex* as beckend. The two configurations
are (presumably) mutually exclusive and therefore cannot be
simultaneously activated
*** Helm-Bibtex Beckend
#+begin_src emacs-lisp
  (use-package helm-bibtex
    :bind (("C-c b" . helm-bibtex)))

    (require 'helm-config)
    (helm-mode 1)
    (autoload 'helm-bibtex "helm-bibtex" "" t)
#+end_src
*** Ivy-Bibtex Beckend
#+begin_src emacs-lisp
  (autoload 'ivy-bibtex "ivy-bibtex" "" t)
  (setq ivy-re-builders-alist
        '((ivy-bibtex . ivy--regex-ignore-order)
          (t . ivy--regex-plus)))
#+end_src
*** Bibliographic Database Management
#+begin_src emacs-lisp

  (setq bibtex-completion-bibliography '("~/Zotero/zotero_full_lib.bib"))
  (setq bibtex-completion-pdf-field "file")
  (setq bibtex-completion-notes-path "~/Dropbox/myannotations/org-roam/Zotero")

  ;; For publications that are composed of more than 1 PDF file
  ;;e.g. a main pubblication + supplemental informations
  ;; this triggers the engine to browse for additional materials
  (setq bibtex-completion-find-additional-pdfs t)

  (setq bibtex-completion-pdf-symbol "⌘")
  (setq bibtex-completion-notes-symbol "✎")

  ;; specify the application to open the publication pdf when this is present
  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (call-process "open" nil 0 nil "-a" "/Applications/PDF Expert 2.app" fpath)))

  ;; specify the browser for opening URLs or DOIs
  (setq bibitex-completion-browser-function
        (lambda (ril -) (start-process "firefox" "*firefox*" "firefox" url)))

#+end_src
**** Org-Ref
#+begin_src emacs-lisp
  (require 'org-ref)
  (setq reftex-default-bibliography '("~/Zotero/zotero_full_lib.bib"))
  (setq org-ref-default-bibliography '("~/Zotero/zotero_full_lib.bib"))


  (defun efs/org-ref-open-pdf-at-point ()
    "Open the pdf for bibtex key under point if it exists"
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
           (key (car results))
           (pdf-file (car (bibtex-completion-find-pdf key))))
      (if (file-exists-p pdf-file)
          (org-open-file pdf-file)
        (message "No PDF found for %s" key))))

  (setq org-ref-open-pdf-function 'efs/org-ref-open-pdf-at-point)

  ;;specify that org-latex-pdf-process takes also care of processing the bibliography
  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+end_src

*** Org-Roam Bibtex
#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :requires bibtex-completion
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :bind (:map org-mode-map
                (("C-c n a" . orb-note-actions)))
    :custom
    (orb-preformat-keywords
     '(("citekey" . "=key=")
       "title"
       "url"
       "author-or-editor-abbrev"
       "abstract"
       "keywords"))

    :custom
    (orb-templates
     '(("r" "ref" plain (function org-roam-capture--get-point) "%?"
        :file-name "zotero/${citekey}"
        ;; :head "#+TITLE: ${title}\n#+ROAM_KEY: ${ref}\n#+CREATED: %U\n#+EDITED: %U\n#+ROAM_TAGS: \n* Notes on ${citekey}\n :PROPERTIES:\n :Custom_ID:  ${citekey}\n :PDF: /home/julian/Documents/Refs/${citekey}.pdf\n :END:\n"
        :head "#+TITLE: ${title}\n#+ROAM_KEY: ${ref}\n#+CREATED: %U\n#+EDITED: %U\n#+ROAM_TAGS: \n* Notes on ${citekey}\n :PROPERTIES:\n :Custom_ID:  ${citekey}\n :END:\n"
        :unnarrowed t
        :immediate-finish t))))
#+end_src
** Org-Roam Server
#+begin_src emacs-lisp
  (use-package org-roam-server
    :ensure t
    :config
    (setq org-roam-server-host "127.0.0.1"
          org-roam-server-port 8080
          org-roam-server-authenticate nil
          org-roam-server-export-inline-images t
          org-roam-server-serve-files nil
          org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
          org-roam-server-network-poll t
          org-roam-server-network-arrows nil
          org-roam-server-network-label-truncate t
          org-roam-server-network-label-truncate-length 60
          org-roam-server-network-label-wrap-length 20))
#+end_src
* AucTex
#+begin_src emacs-lisp
  ;; enables reftex whenever a latex buffer is opened
  (require 'reftex)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

  (setq TeX-auto-save t)
  (setq TeX-parse-self t)

  (setq-default TeXMaster nil)
#+end_src
* Yasnippets
#+begin_src emacs-lisp
    (add-to-list 'load-path
                 "~/.config/emacs/plugins/yasnippet")
    (require 'yasnippet)

    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode)

  ;; fundamental-mode loads a set of snippets that are useful in a multi-environment environment and that gets loaded whenever a minor mode is activated
  (add-hook 'yas-minor-mode-hook (lambda ()
                                   (yas-activate-extra-mode 'fundamental-mode)))
#+end_src
* Custom
* Todotree
** DONE Find a way to integrate org-roam and Zotero without the need to export the .bib file
CLOSED: [2021-05-27 Thu 16:41]
*** DONE In case the point above is not possible find a way to encapsulate the name of the path of the library, pdfs and notes inside variables toe be shared between ivy-bibtex and org-ref
CLOSED: [2021-06-02 Wed 12:57]
** DONE Find a way to set the color of some faces at configuration time
CLOSED: [2021-06-01 Tue 02:20]
** TODO Customize the citation commands, as specified in the documentation
** DONE See if there's any way to include Zotero tags in the bibliographic search
CLOSED: [2021-06-01 Tue 02:20]
** DONE Try to understand why when finding with ivy-bibtex a document that also contains annotations it is not possible to open the annotations
CLOSED: [2021-06-01 Tue 02:21]
** TODO Find a way to integrate the information on the pdf file path in the the orb-template instruction
** TODO Create a fully fledged emacs-config file
*** TODO Decouple the initialization of helm and helm-bibtex
